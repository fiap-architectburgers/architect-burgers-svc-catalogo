apiVersion: apps/v1
kind: Deployment
metadata:
  name: archburgers-svc-catalogo-deployment
spec:
  selector:
    matchLabels:
      app: archburgers-svc-catalogo
  replicas: 1
  template:
    metadata:
      labels:
        app: archburgers-svc-catalogo
    spec:
      containers:
        - name: archburgers-svc-catalogo-container
          image: gomesrodris/architect-burgers-svc-catalogo:0.0.1
          ports:
            - containerPort: 8092
          env:
            - name: "archburgers.datasource.dbUrl"
              valueFrom:
                configMapKeyRef:
                  name: "archburgers-db-access-config"
                  key: "archburgers.datasource.dbUrl"
            - name: "archburgers.datasource.dbUser"
              valueFrom:
                configMapKeyRef:
                  name: "archburgers-db-access-config"
                  key: "archburgers.datasource.dbUser"
            - name: "archburgers.datasource.dbPass"
              valueFrom:
                configMapKeyRef:
                  name: "archburgers-db-access-config"
                  key: "archburgers.datasource.dbPass"

          readinessProbe:
            httpGet:
              port: 8092
              path: /healthcheck
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 1
          livenessProbe:
            httpGet:
              port: 8092
              path: /healthcheck
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
            # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
            # A common pattern for liveness probes is to use the same low-cost HTTP endpoint as for readiness probes,
            # but with a higher failureThreshold
            failureThreshold: 5
          resources:
            requests:
              cpu: 250m

